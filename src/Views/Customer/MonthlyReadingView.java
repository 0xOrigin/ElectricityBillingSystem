package Views.Customer;

import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import Controllers.Interface.Controller;
import Views.View;
import javax.swing.JFrame;
import Controllers.Interface.CustomerController;

/**
 *
 * @author xorigin
 */
public class MonthlyReadingView extends javax.swing.JFrame implements View {

    /**
     * Creates new form MonthlyReadingView
     * @param previousFrame
     * @param controller
     */
    public MonthlyReadingView(javax.swing.JFrame previousFrame, CustomerController controller) {
        
        this.setPreviousFrame(previousFrame);
        this.setController(controller);
        
        this.lastDate = controller.getLastReleaseDate();
        this.lastReading = controller.getLastReading();
        
        this.lastDate[0] = (this.lastDate[0].matches("0\\d") ? this.lastDate[0].substring(1) : this.lastDate[0]);
        
        initComponents();
        
        this.setSpecialSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackButton = new javax.swing.JButton();
        ReadingField = new javax.swing.JTextField();
        MonthlyReadingLabel = new javax.swing.JLabel();
        MonthField = new javax.swing.JSpinner();
        DateLabel = new javax.swing.JLabel();
        Submit = new javax.swing.JButton();
        BillDateLabel = new javax.swing.JLabel();
        BillReadingLabel = new javax.swing.JLabel();
        LastDateField = new javax.swing.JTextField();
        LastReadingField = new javax.swing.JTextField();
        YearField = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Enter monthly reading");
        setResizable(false);

        BackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/BackIcon.png"))); // NOI18N
        BackButton.setToolTipText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        ReadingField.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        ReadingField.setToolTipText("Enter new monthly reading");
        ReadingField.setMinimumSize(new java.awt.Dimension(64, 30));
        ReadingField.setPreferredSize(new java.awt.Dimension(64, 30));
        ReadingField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ReadingFieldFocusLost(evt);
            }
        });

        MonthlyReadingLabel.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        MonthlyReadingLabel.setLabelFor(ReadingField);
        MonthlyReadingLabel.setText("Monthly Reading");
        MonthlyReadingLabel.setToolTipText("");
        MonthlyReadingLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        MonthField.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        MonthField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));
        MonthField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                MonthFieldAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        DateLabel.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        DateLabel.setLabelFor(MonthField);
        DateLabel.setText("Date of bill (Y/M)");
        DateLabel.setToolTipText("");
        DateLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        Submit.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        Submit.setText("Submit reading");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        BillDateLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        BillDateLabel.setForeground(new java.awt.Color(51, 51, 51));
        BillDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BillDateLabel.setLabelFor(LastDateField);
        BillDateLabel.setText("Latest bill date: ");
        BillDateLabel.setOpaque(true);

        BillReadingLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        BillReadingLabel.setForeground(new java.awt.Color(51, 51, 51));
        BillReadingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BillReadingLabel.setLabelFor(LastReadingField);
        BillReadingLabel.setText("Latest reading: ");
        BillReadingLabel.setOpaque(true);

        LastDateField.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        LastDateField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        LastDateField.setToolTipText("Last bill date");
        LastDateField.setEnabled(false);
        LastDateField.setMinimumSize(new java.awt.Dimension(64, 30));
        LastDateField.setPreferredSize(new java.awt.Dimension(64, 30));
        LastDateField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                LastDateFieldAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        LastReadingField.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        LastReadingField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        LastReadingField.setToolTipText("Last bill reading");
        LastReadingField.setEnabled(false);
        LastReadingField.setMinimumSize(new java.awt.Dimension(64, 30));
        LastReadingField.setPreferredSize(new java.awt.Dimension(64, 30));
        LastReadingField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                LastReadingFieldAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        YearField.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        YearField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));
        YearField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                YearFieldAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BillDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LastDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(BillReadingLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LastReadingField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(MonthlyReadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ReadingField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DateLabel)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(YearField)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(MonthField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BillDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LastDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LastReadingField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BillReadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MonthlyReadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ReadingField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MonthField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(YearField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed

        this.dispose();
        this.previousFrame.revalidate();
        this.previousFrame.setVisible(true);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void ReadingFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ReadingFieldFocusLost

        String readingText = this.ReadingField.getText();
        
        if(readingText.isBlank() || !readingText.matches("\\d+")){

            this.globalValidationState = false;

            JOptionPane.showMessageDialog(this, "Please enter a valid reading.", "Monthly reading field", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_ReadingFieldFocusLost

    private void MonthFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_MonthFieldAncestorAdded
        
        int month = Integer.parseInt(this.lastDate[0]);
        
        if(month == 12)
            month = 0;
        
        this.MonthField.setModel(new SpinnerNumberModel(++month, 1, 12, 1));
    }//GEN-LAST:event_MonthFieldAncestorAdded

    private void LastDateFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_LastDateFieldAncestorAdded
        
        this.LastDateField.setText(this.lastDate[0] + "/" + this.lastDate[1]);
    }//GEN-LAST:event_LastDateFieldAncestorAdded

    private void LastReadingFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_LastReadingFieldAncestorAdded
        
        this.LastReadingField.setText(this.lastReading);
    }//GEN-LAST:event_LastReadingFieldAncestorAdded

    private void YearFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_YearFieldAncestorAdded
        
        int month = Integer.parseInt(this.lastDate[0]);
        
        int year = Integer.parseInt(this.lastDate[1]);
        
        if(month == 12)
            year++;
        
        this.YearField.setModel(new SpinnerNumberModel(year, year, year + 3, 1));
    }//GEN-LAST:event_YearFieldAncestorAdded

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
        
        this.globalValidationState = true;
        
        this.ReadingFieldFocusLost(null);
        
        if(!this.isValidDate()){
        
            JOptionPane.showMessageDialog(this, "Please enter a valid date.", "Month field", JOptionPane.WARNING_MESSAGE); 
            return;
        }
        
        if(this.globalValidationState && this.isValidDate()){
        
            int currentReading = Integer.parseInt(this.ReadingField.getText());
            String releaseDate = String.format("%02d", this.MonthField.getValue()) + "/" + String.valueOf(this.YearField.getValue());

            if(this.controller.isValidReading(currentReading)){

                this.controller.releaseNewBill(currentReading, releaseDate);

                JOptionPane.showMessageDialog(this, "New invoice issued.", "Successful operation", JOptionPane.INFORMATION_MESSAGE);

                this.BackButtonActionPerformed(null);

            } else {

                JOptionPane.showMessageDialog(this, "Please enter a valid reading.", "Monthly reading field", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_SubmitActionPerformed

    private boolean isValidDate(){
    
        int lastMonthValue = Integer.parseInt(this.lastDate[0]);
        int lastYearValue = Integer.parseInt(this.lastDate[1]);
        
        int updatedMonth = Integer.parseInt(this.MonthField.getValue().toString());
        int updatedYear = Integer.parseInt(this.YearField.getValue().toString());
        
        
        if(updatedYear > lastYearValue){
            
            return true;
            
        } else {
        
            return updatedMonth - lastMonthValue > 0;
        }
    }
    
    @Override
    public final void setSpecialSettings() {
        
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }
    
    @Override
    public final void setController(Controller controller){
        
        this.controller = (CustomerController) controller;
    }
    
    @Override
    public final void setPreviousFrame(JFrame previousFrame) {
        
        this.previousFrame = previousFrame;
    }
    
    @Override
    public javax.swing.JFrame getPreviousFrame(){
    
        return this.previousFrame;
    }
    
    
    private CustomerController controller;
    private final String[] lastDate;
    private final String lastReading;
    private boolean globalValidationState = false;
    private javax.swing.JFrame previousFrame;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel BillDateLabel;
    private javax.swing.JLabel BillReadingLabel;
    private javax.swing.JLabel DateLabel;
    private javax.swing.JTextField LastDateField;
    private javax.swing.JTextField LastReadingField;
    private javax.swing.JSpinner MonthField;
    private javax.swing.JLabel MonthlyReadingLabel;
    private javax.swing.JTextField ReadingField;
    private javax.swing.JButton Submit;
    private javax.swing.JSpinner YearField;
    // End of variables declaration//GEN-END:variables
}
